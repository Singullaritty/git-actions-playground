pipeline {
  agent any

  environment {
    deploymentName = "playground"
    containerName = "app-container"
    serviceName = "playground-svc"
    imageName = "lbohdan93/playground-app:${GIT_COMMIT}"
    applicationURL="http://192.168.39.203"
    applicationURI="/increment/99"
  }

  stages {
      stage('Maven Build') {
            steps {
              sh "mvn clean package -DskipTests=true"
              archive 'target/*.jar' //test webhook
            }
        }
        
      stage('Maven Unit Test') {
        steps {
          sh "mvn test"
        }
      }

      stage('Mutation tests') {
        steps {
          sh "mvn org.pitest:pitest-maven:mutationCoverage"
        }
        post {
          always {
            pitmutation mutationStatsFile: '**/target/pit-reports/**/mutations.xml'
          }
        }
      }

      stage('SonarQUBE - static analysis') {
            steps {
              withSonarQubeEnv('SonarQube') {
                sh """
                mvn clean verify sonar:sonar \
                  -Dsonar.projectKey=playground-app \
                  -Dsonar.projectName='playground-app' \
                  -Dsonar.host.url=http://localhost:9000 \
                """
              }
              timeout(time: 2, unit: 'MINUTES') {
                script {
                  waitForQualityGate abortPipeline: true
                }
              }
            }
        }

      stage('Vulnerability scan - docker') {
        steps {
          parallel(
            "Dependency scan": {
              sh "echo 'OK'"
            },
            "Trivy image scan": {
              sh "bash docker-image-scan.sh"
            },
            "Conftest": {
              sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy docker-security.rego Dockerfile'
            }
          )
          }
        }

      stage('Docker build & push') {
        steps {
          withDockerRegistry([credentialsId: "docker", url: ""]) {
            sh 'docker build -t lbohdan93/playground-app:""$GIT_COMMIT"" .'
            sh 'docker push lbohdan93/playground-app:""$GIT_COMMIT""'
          }
        }
      }

      stage('Vulnerability scan - k8s') {
        steps {
          parallel(
            "OPA Conf scan": {
              sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy k8s-security.rego k8s_deployment.yaml'
            },
            "Kubesec scan": {
              sh "bash kubesec-scan.sh"
            },
            "k8s trivy scan": {
              sh "bash trivy-k8s-scan.sh"
            }
          ) 
        }
      }

      stage('k8s deployment - nonprod') {
          steps {
              withKubeConfig([credentialsId: 'kubeadm']){
              sh "bash k8s-deploy.sh"
              }
          }
      }

      stage('k8s deployment status') {
          steps {
              withKubeConfig([credentialsId: 'kubeadm']){
              sh "bash k8s-deploy-status.sh"
              }
          }
      } 

    }

      stage('Integration test - nonprod') {
        steps {
          script {
            try {
              withKubeConfig([credentialsId: 'kubeadm']) {
                sh "bash integration-test.sh"
              }
            } catch (e) {
              withKubeConfig([credentialsId: 'kubeadm']) {
                sh "minikube kubectl -- -n default rollout undo deploy ${deploymentName}"
              }
              throw e
            }
          }
        }
      }

  post {
    always {
      junit 'target/surefire-reports/*.xml'
      jacoco execPattern: 'target/jacoco.exec'
      // pitmutation mutationStatsFile: '**/target/pit-reports/**/mutations.xml'
      // dependencyCheckPublisher pattern: 'target/dependency-check-report.xml'
    }

    // success {

    // }

    // failure {

    // }
  }
}